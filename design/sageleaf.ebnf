# https://bnfplayground.pauliankline.com/

<ws> ::= " " | "\t" | "\n"

<str> ::= "\"" ([a-z] | [A-Z] | [0-9])* "\""

<num> ::= "-"? ("0" | [1-9] [0-9]*) ("." [0-9]+ )?

<bool> ::= "true" | "false"

<lit> ::= <num> | <str> | <bool> | "unit"

<id> ::= ([a-z] | [A-Z])+ ([a-z] | [A-Z] | [0-9])*

<appl> ::= <ws> <expr> <appl> | E

# <arc> ::= "(" <expr> <ws> "->" <ws> <expr> ")"

# <edge> ::= "(" <expr> <ws> "--" <ws> <expr> ")"

# <seq> ::= "[" (<expr> (("," <ws> <expr>)* | "for" <ws> <id> <ws> "from" <ws> <num> (<ws> "to" <ws> <num>)?))? "]"

# <set> ::= "{" (<expr> ("," <ws> <expr>)*)? "}"

<map> ::= "{" (<expr> "->" <expr> ("," <ws> <expr> "->" <expr>)*)? "}"

# <graph> ::= "[" (<expr> ("->" | "--") <expr> ("," <ws> <expr> ("->" | "--") <expr>)*)? "]"

<expr> ::= "(" <expr> ")" <appl>
        #  | "if" <ws> <expr> <ws> "then" <ws> <expr> <ws> "else" <ws> <expr> <appl>
        #  | "let" <ws> <id> <ws> "be" <ws> <expr> <ws> "in" <expr> <appl>
        #  | "do" <ws> <expr> <ws> "then" <ws> <expr>
        #  | <seq> <appl>
        #  | <set> <appl>
         | <map> <appl>
        #  | <graph> <appl>
        #  | <arc> <appl>
        #  | <edge> <appl>
         | <lit> <appl>
         | <id> <appl>

<mod> ::= "../"* <id> ("." <id>)*

<stmnt> ::= "def" <ws> <id> <ws> "as" <ws> <expr>
          | "import" <ws> <mod>

<prog> ::= (<stmnt> ";" "\n"*)*